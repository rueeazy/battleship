{"version":3,"sources":["components/Cell.js","components/PlayerGrid.js","components/ComputerGrid.js","components/Ship.js","components/Gameboard.js","App.js","index.js"],"names":["Cell","props","onClick","markHit","id","className","status","ship","PlayerGrid","useState","divs","i","push","generateCells","cells","setCells","playerCellsCopy","playerCells","grid","onDrop","e","preventDefault","ship_id","dataTransfer","getData","specific_id","ship_length","document","getElementById","shipNameWithLastId","lastChild","shipClass","slice","lastShipIndex","parseInt","substr","shipLastId","target","selectedShipIndex","newNotAllowedHorizontal","splice","isHorizontal","includes","removeShipFromArmament","onDragOver","map","item","key","ComputerGrid","useEffect","setCount","count","width","cpuCells","cpuDivs","shipsArray","name","directions","populateCPU","randomStart","randomDirection","randomNumber","finalShip","direction","Math","abs","floor","random","length","isTaken","some","index","isAtRightEdge","ceil","forEach","Ship","currentShip","type","rotation","draggable","onDragStart","shipLength","childNodes","setData","stopPropagation","onMouseDown","Gameboard","setHorizontal","querySelector","removeChild","startGame","App","isGameOver","setGameOver","humanTurn","setHumanTurn","cpuCarrierCount","setCpuCarrierCount","cpuBattleshipCount","setCpuBattleshipCount","cpuCruiserCount","setCpuCruiserCount","cpuSubmarineCount","setCpuSubmarineCount","cpuDestroyerCount","setCpuDestroyerCount","cpuHealth","setCpuHealth","carrierCount","setCarrierCount","battleshipCount","setBattleshipCount","cruiserCount","setCruiserCount","submarineCount","setSubmarineCount","destroyerCount","setDestroyerCount","health","setHealth","nextTurn","turnDisplay","innerHTML","setTimeout","computerGo","userCells","classList","contains","style","backgroundColor","add","checkShipDestroyed","shipname","display","cell","ReactDOM","render"],"mappings":"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","file":"static/js/main.4443064c.chunk.js","sourcesContent":["import React from 'react';\n\nconst Cell = (props) => {\n\n    return (\n        <div  onClick={props.markHit} id={props.id} className={props.status ? 'taken ' + props.ship  : null}>\n        </div>\n    )\n}\n\nexport default Cell","import React, {useState} from 'react';\nimport Cell from './Cell';\n\nconst generateCells = () => {\n    let divs = [];\n    for(let i=0; i<10*10; i++) {\n        divs.push({id: i, status: false, ship: \"\"})\n        } \n    return divs\n}\n\nconst PlayerGrid = (props) => {\n    const [cells, setCells] = useState(() => generateCells())\n\n    let playerCellsCopy = cells\n    let playerCells = [...playerCellsCopy]\n\n    const drop = (e) => {\n        e.preventDefault();\n        const ship_id = e.dataTransfer.getData('ship_id');\n        const specific_id = e.dataTransfer.getData('specific_id')\n        const ship_length = e.dataTransfer.getData('ship_length')\n\n        let ship = document.getElementById(ship_id)\n        let shipNameWithLastId = ship.lastChild.id\n        let shipClass = shipNameWithLastId.slice(0, -2)\n        let lastShipIndex = parseInt(shipNameWithLastId.substr(-1))\n        let shipLastId = lastShipIndex + parseInt(e.target.id)\n        const notAllowedHorizontal = [0,10,20,30,40,50,60,70,80,90,1,11,21,31,41,51,61,71,81,91,2,22,32,42,52,62,72,82,92,3,13,23,33,43,53,63,73,83,93]\n        const notAllowedVertical = [99,98,97,96,95,94,93,92,91,90]\n        const edges = [9,19,29,39,49,59,69,79,89,99]\n\n        let selectedShipIndex = parseInt(specific_id.substr(-1))\n        let newNotAllowedHorizontal = notAllowedHorizontal.splice(0, 10* (lastShipIndex -1))\n        // let newNotAllowedVertical = notAllowedVertical.splice(0, 10* (lastShipIndex -1))\n\n        shipLastId = shipLastId - selectedShipIndex\n\n        if(props.isHorizontal === true && !newNotAllowedHorizontal.includes(shipLastId) && !edges.includes(shipLastId - (ship_length - 1))) {\n            for(let i = 0; i < ship_length; i++) {\n                playerCells[parseInt(e.target.id) - selectedShipIndex + i].status = true;\n                playerCells[parseInt(e.target.id) - selectedShipIndex + i].ship = shipClass;\n            }\n        } else if (props.isHorizontal === false && !notAllowedVertical.includes(shipLastId)) {\n            for(let i = 0; i < ship_length; i++) {\n                playerCells[parseInt(e.target.id) - selectedShipIndex + (10*i)].status = true;\n                playerCells[parseInt(e.target.id) - selectedShipIndex + (10*i)].ship = shipClass;\n            }\n        } else return\n\n        setCells(playerCells)\n        props.removeShipFromArmament(ship);\n    }\n\n    const dragOver = (e) => {\n        e.preventDefault();\n    }\n\n    return (\n        <div \n        className={props.grid}\n        onDrop={drop}\n        onDragOver={dragOver\n        }>\n            {cells.map(item => {\n                return <Cell \n                key={item.id} \n                id={item.id} \n                status={item.status} \n                ship={item.ship} />\n            })}\n        </div>\n    )\n}\n\nexport default PlayerGrid","import React, {useState, useEffect} from 'react';\nimport Cell from './Cell';\n\nconst generateCells = () => {\n    let divs = [];\n    for(let i=0; i<10*10; i++) {\n        divs.push({id: i, status: false, ship: \"\"})\n        } \n    return divs\n}\n\nconst ComputerGrid = (props) => {\n    useEffect(() => {\n        setCount(count + 1)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const [width] = useState(10)\n    const [cpuCells] = useState(() => generateCells())\n    const [count, setCount] = useState(0)\n\n    let cpuDivs = cpuCells;\n    let divs = [...cpuDivs]\n\n    const shipsArray = [\n        {\n            name: 'carrier',\n            directions: [\n                [0 , 1, 2, 3, 4],\n                [0 , 10, 20, 30, 40]\n            ]\n        },\n        {\n            name: 'battleship',\n            directions: [\n                [0 , 1, 2, 3],\n                [0 , 10, 20, 30]\n            ]\n        },\n        {\n            name: 'cruiser',\n            directions: [\n                [0 , 1, 2],\n                [0 , 10, 20]\n            ]\n        },\n        {\n            name: 'submarine',\n            directions: [\n                [0 , 1, 2],\n                [0 , 10, 20]\n            ]\n        },\n        {\n            name: 'destroyer',\n            directions: [\n                [0 , 1],\n                [0 , 10]\n            ]\n        }\n    ]\n\n    // Populate random ships for cpu\n    const populateCPU = (ship) => {\n        let randomDirection = randomNumber();\n        let finalShip = ship.directions[randomDirection]; \n        let direction = (randomDirection === 1) ? 1 : 10;\n        let randomStart;\n        if(randomDirection === 1) {\n            randomStart = Math.abs(Math.floor(Math.random() * ((100 - (finalShip.length * width)) + width)))\n        } else {\n            randomStart = Math.abs(Math.floor(Math.random() * cpuCells.length - (ship.directions[0].length * direction)))\n        }\n        const isTaken = finalShip.some(index => divs[randomStart + index].status !== false )\n        const isAtRightEdge = randomStart + finalShip.length > (Math.ceil((randomStart / 10) + .01) * 10) \n\n        if(!isTaken && !isAtRightEdge) {\n            finalShip.forEach(index => {\n                divs[randomStart + index].status = true;\n                divs[randomStart + index].ship = ship.name;\n            })\n        } else {\n            populateCPU(ship)\n        }\n    }\n\n    const randomNumber = () => {\n        return Math.floor(Math.random() * 2);\n    }\n\n    const paintShips = () => {\n        populateCPU(shipsArray[0])\n        populateCPU(shipsArray[1])\n        populateCPU(shipsArray[2])\n        populateCPU(shipsArray[3])\n        populateCPU(shipsArray[4])\n    }\n\n    if(count < 1) {\n        paintShips();\n    }\n\n    return (\n        <div className={props.grid}>\n            {cpuCells.map(item => {\n                return <Cell \n                key={item.id} \n                id={item.id} \n                status={item.status} \n                ship={item.ship}\n                markHit={props.markHit} \n                />\n            })}\n        </div>\n    )\n}\n\nexport default ComputerGrid","import React, {useState} from 'react';\n\nconst Ship = (props) => {\n    const [length] = useState(props.length)\n\n    let currentShip;\n\n    const dragStart = (e) => {\n        const target = e.target\n        let shipLength = target.childNodes.length\n        e.dataTransfer.setData('ship_id', target.id);\n        e.dataTransfer.setData('specific_id', currentShip)\n        e.dataTransfer.setData('ship_length', shipLength)\n    }\n\n    const dragOver = (e) => {\n        e.stopPropagation();\n    }\n\n    const getSpecificId = (e) => {\n        currentShip = e.target.id\n    }\n\n    let divs = []\n\n    for(let i=0; i<length; i++) {\n        divs.push(<div key={props.type + '-' + i}id={props.type + '-' + i}></div>)\n    }\n\n    return (\n        <div \n        id={props.id} \n        className={'ship ' + props.type + '-container'  + (props.rotation === false ? '-vertical' : \"\")} \n        draggable=\"true\"\n        onDragStart={dragStart}\n        onDragOver={dragOver}\n        onMouseDown={getSpecificId}>\n            {divs}\n        </div>\n    )\n}\n\nexport default Ship","import React, {useState} from 'react';\nimport PlayerGrid from './PlayerGrid';\nimport ComputerGrid from './ComputerGrid';\nimport Ship from './Ship';\n\nconst Gameboard = (props) => {\n    const [isHorizontal, setHorizontal] = useState(true)\n\n    const rotate = (e) => {\n        e.preventDefault()\n        setHorizontal(!isHorizontal)\n    }\n\n    const removeShipFromArmament = (ship) => {\n        let armament = document.querySelector('.armament-container')\n        armament.removeChild(ship)\n    }\n\n    return (\n        <div className=\"gameboard\">\n            <div className=\"title\">BattleShip</div>\n            <div className=\"grid-container\">\n                <PlayerGrid \n                grid=\"player-grids grid-user\"\n                isHorizontal={isHorizontal}\n                removeShipFromArmament={removeShipFromArmament}\n                 />\n                <ComputerGrid \n                grid=\"player-grids grid-cpu\"\n                markHit={props.markHit}\n                />\n            </div>\n            <div className=\"hidden-info\">\n                <button onClick={props.startGame} id=\"start\" className=\"start\">Start Game</button>\n                <button  onClick={rotate} id=\"rotate\" className=\"rotate\">Rotate Ships</button>\n                <h3 id=\"turn\"> </h3>\n                <h3 id=\"info\">Drag & Place Your Ships</h3>\n            </div>\n            <div className=\"armament-container\">\n                <Ship \n                    type=\"carrier\"\n                    id=\"ship-1\"\n                    length={5}\n                    rotation={isHorizontal}\n                 />\n                <Ship \n                    type=\"battleship\"\n                    id=\"ship-2\"\n                    length={4}\n                    rotation={isHorizontal}\n                />\n                <Ship \n                    type=\"cruiser\"\n                    id=\"ship-3\"\n                    length={3}\n                    rotation={isHorizontal}\n                />\n                <Ship \n                    type=\"submarine\"\n                    id=\"ship-4\"\n                    length={3}\n                    rotation={isHorizontal}\n                />\n                <Ship \n                    type=\"destroyer\"\n                    id=\"ship-5\"\n                    length={2}\n                    rotation={isHorizontal}\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default Gameboard","import React, {useEffect, useState} from 'react';\nimport Gameboard from './components/Gameboard';\nimport './assets/styles/reset.css';\nimport './assets/styles/main.css';\n\nfunction App() {\n  const [isGameOver, setGameOver] = useState(false)\n  const [humanTurn, setHumanTurn] = useState()\n  const [cpuCarrierCount, setCpuCarrierCount] = useState(5)\n  const [cpuBattleshipCount, setCpuBattleshipCount] = useState(4)\n  const [cpuCruiserCount, setCpuCruiserCount] = useState(3)\n  const [cpuSubmarineCount, setCpuSubmarineCount] = useState(3)\n  const [cpuDestroyerCount, setCpuDestroyerCount] = useState(2)\n  const [cpuHealth, setCpuHealth] = useState(17)\n\n  const [carrierCount, setCarrierCount] = useState(5)\n  const [battleshipCount, setBattleshipCount] = useState(4)\n  const [cruiserCount, setCruiserCount] = useState(3)\n  const [submarineCount, setSubmarineCount] = useState(3)\n  const [destroyerCount, setDestroyerCount] = useState(2)\n  const [health, setHealth] = useState(17)\n\n  //Game Flow\n  useEffect(() => {\n    nextTurn()\n  })\n\n  const startGame = () => {\n    setHumanTurn(true)\n    document.querySelector('.armament-container').style.display = \"none\"\n    document.querySelector('#info').innerHTML = \"\"\n    document.querySelector('#start').style.display = \"none\"\n    document.querySelector('#rotate').style.display = \"none\"\n  }\n\n  const nextTurn = () => {\n    let turnDisplay = document.querySelector('#turn')\n    if(isGameOver) {\n      document.querySelector('#info').innerHTML = (health === 0) ? \"Game Over. You Lose\" : \"Game Over. You Win\"\n      return\n    } else if(humanTurn === true) {\n      turnDisplay.innerHTML = \"Your Turn\";\n    } else if(humanTurn === false) {\n      turnDisplay.innerHTML = \"Computers Turn\";\n      setTimeout(computerGo, 1000)\n    }\n    if(cpuHealth === 0) {\n      setGameOver(true)\n    }\n  }\n\n  const computerGo = () => {\n    document.querySelector('#info').innerHTML = \"\"\n    let userCells = document.querySelector('.grid-user').childNodes\n    let random = Math.floor(Math.random() * 100)\n    if(userCells[random].classList.contains('miss') || userCells[random].style.backgroundColor === \"#F75263\") {\n      computerGo();\n      return\n    } else if(userCells[random].classList.length === 0) {\n      userCells[random].style.backgroundColor = \"rgb(199 186 186 / 80%)\"\n      userCells[random].classList.add('miss')\n    } else {\n      userCells[random].style.backgroundColor = \"#F75263\";\n      if(userCells[random].classList[1] === \"carrier\") {\n        setHealth(health - 1)\n        setCarrierCount(carrierCount - 1)\n        checkShipDestroyed(carrierCount, userCells[random].classList[1])\n      } else if(userCells[random] === \"battleship\") {\n        setHealth(health - 1)\n        setBattleshipCount(battleshipCount - 1)\n        checkShipDestroyed(battleshipCount, userCells[random].classList[1])\n      } else if(userCells[random] === \"cruiser\") {\n        setHealth(health - 1)\n        setCruiserCount(cruiserCount - 1)\n        checkShipDestroyed(cruiserCount, userCells[random].classList[1])\n      } else if(userCells[random] === \"submarine\") {\n        setHealth(health - 1)\n        setSubmarineCount(submarineCount - 1)\n        checkShipDestroyed(submarineCount, userCells[random].classList[1])\n      } else if(userCells[random] === \"destroyer\") {\n        setHealth(health - 1)\n        setDestroyerCount(destroyerCount - 1)\n        checkShipDestroyed(destroyerCount, userCells[random].classList[1])\n      }\n    }\n    setHumanTurn(!humanTurn)\n  }\n\n  const markHit = (e) => {\n    let cell = e.target;\n    if (cell.style.backgroundColor === \"#F75263\" || cell.classList.contains('miss')) {\n      return\n    } else if(cell.classList.length === 0) {\n      cell.style.backgroundColor = \"rgb(199 186 186 / 80%)\"\n      cell.classList.add('miss')\n    } else {\n      cell.style.backgroundColor = \"#F75263\"\n      if(cell.classList[1] === \"carrier\") {\n        setCpuHealth(cpuHealth - 1)\n        setCpuCarrierCount(cpuCarrierCount - 1)\n        checkShipDestroyed(cpuCarrierCount, cell.classList[1])\n      } else if(cell.classList[1] === \"battleship\") {\n        setCpuHealth(cpuHealth - 1)\n        setCpuBattleshipCount(cpuBattleshipCount - 1)\n        checkShipDestroyed(cpuBattleshipCount, cell.classList[1])\n      } else if(cell.classList[1] === \"cruiser\") {\n        setCpuHealth(cpuHealth - 1)\n        setCpuCruiserCount(cpuCruiserCount - 1)\n        checkShipDestroyed(cpuCruiserCount, cell.classList[1])\n      } else if(cell.classList[1] === \"submarine\") {\n        setCpuHealth(cpuHealth - 1)\n        setCpuSubmarineCount(cpuSubmarineCount - 1)\n        checkShipDestroyed(cpuSubmarineCount, cell.classList[1])\n      } else if(cell.classList[1] === \"destroyer\") {\n        setCpuHealth(cpuHealth - 1)\n        setCpuDestroyerCount(cpuDestroyerCount - 1)\n        checkShipDestroyed(cpuDestroyerCount, cell.classList[1])\n      }\n    }\n    setHumanTurn(!humanTurn)\n  }\n\n  const checkShipDestroyed = (count, shipname) => {\n    if(count === 1) {\n      let info = document.querySelector('#info')\n      info.innerHTML = humanTurn === true ? `Enemy ${shipname} destroyed` : `Your ${shipname} was destroyed` \n    } else return\n  }\n\n  return (\n    <div className=\"app\">\n      <Gameboard\n      startGame={startGame}\n      markHit={markHit} \n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}